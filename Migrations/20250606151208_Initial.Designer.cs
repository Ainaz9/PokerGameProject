// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PokerGameRSF;

#nullable disable

namespace PokerGameRSF.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250606151208_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokerGameRSF.Models.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("PokerGameRSF.Models.BoardCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("GameSessionId");

                    b.ToTable("BoardCards");
                });

            modelBuilder.Entity("PokerGameRSF.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<string>("Suit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("PokerGameRSF.Models.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrentTurnPlayerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Phase")
                        .HasColumnType("integer");

                    b.Property<Guid>("Player1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Player2Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Pot")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTurnPlayerId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("PokerGameRSF.Models.PlayerAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BetId")
                        .IsUnique();

                    b.HasIndex("GameSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerActions");
                });

            modelBuilder.Entity("PokerGameRSF.Models.PlayerCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerCards");
                });

            modelBuilder.Entity("PokerGameRSF.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Chips")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PokerGameRSF.Models.Bet", b =>
                {
                    b.HasOne("PokerGameRSF.Models.GameSession", "GameSession")
                        .WithMany("Bets")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerGameRSF.Models.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokerGameRSF.Models.BoardCard", b =>
                {
                    b.HasOne("PokerGameRSF.Models.Card", "Card")
                        .WithMany("BoardCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokerGameRSF.Models.GameSession", "GameSession")
                        .WithMany("BoardCards")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("PokerGameRSF.Models.GameSession", b =>
                {
                    b.HasOne("PokerGameRSF.Models.User", "CurrentTurnPlayer")
                        .WithMany()
                        .HasForeignKey("CurrentTurnPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokerGameRSF.Models.User", "Player1")
                        .WithMany("GameSessionsAsPlayer1")
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokerGameRSF.Models.User", "Player2")
                        .WithMany("GameSessionsAsPlayer2")
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentTurnPlayer");

                    b.Navigation("Player1");

                    b.Navigation("Player2");
                });

            modelBuilder.Entity("PokerGameRSF.Models.PlayerAction", b =>
                {
                    b.HasOne("PokerGameRSF.Models.Bet", "Bet")
                        .WithOne()
                        .HasForeignKey("PokerGameRSF.Models.PlayerAction", "BetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PokerGameRSF.Models.GameSession", "GameSession")
                        .WithMany("PlayerActions")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerGameRSF.Models.User", "User")
                        .WithMany("PlayerActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("GameSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokerGameRSF.Models.PlayerCard", b =>
                {
                    b.HasOne("PokerGameRSF.Models.Card", "Card")
                        .WithMany("PlayerCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokerGameRSF.Models.GameSession", "GameSession")
                        .WithMany("PlayerCards")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerGameRSF.Models.User", "User")
                        .WithMany("PlayerCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GameSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokerGameRSF.Models.Card", b =>
                {
                    b.Navigation("BoardCards");

                    b.Navigation("PlayerCards");
                });

            modelBuilder.Entity("PokerGameRSF.Models.GameSession", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("BoardCards");

                    b.Navigation("PlayerActions");

                    b.Navigation("PlayerCards");
                });

            modelBuilder.Entity("PokerGameRSF.Models.User", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("GameSessionsAsPlayer1");

                    b.Navigation("GameSessionsAsPlayer2");

                    b.Navigation("PlayerActions");

                    b.Navigation("PlayerCards");
                });
#pragma warning restore 612, 618
        }
    }
}
